// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"fmt"
)

const (
	// MusicServiceSpotify is a MusicService of type Spotify
	MusicServiceSpotify MusicService = iota
	// MusicServiceDeezer is a MusicService of type Deezer
	MusicServiceDeezer
	// MusicServiceYandex is a MusicService of type Yandex
	MusicServiceYandex
)

const _MusicServiceName = "spotifydeezeryandex"

var _MusicServiceMap = map[MusicService]string{
	0: _MusicServiceName[0:7],
	1: _MusicServiceName[7:13],
	2: _MusicServiceName[13:19],
}

// String implements the Stringer interface.
func (x MusicService) String() string {
	if str, ok := _MusicServiceMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MusicService(%d)", x)
}

var _MusicServiceValue = map[string]MusicService{
	_MusicServiceName[0:7]:   0,
	_MusicServiceName[7:13]:  1,
	_MusicServiceName[13:19]: 2,
}

// ParseMusicService attempts to convert a string to a MusicService
func ParseMusicService(name string) (MusicService, error) {
	if x, ok := _MusicServiceValue[name]; ok {
		return x, nil
	}
	return MusicService(0), fmt.Errorf("%s is not a valid MusicService", name)
}

// MarshalText implements the text marshaller method
func (x *MusicService) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *MusicService) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMusicService(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
